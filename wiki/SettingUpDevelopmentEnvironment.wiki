#summary How to set up development environment

= Introduction =

This page describes how to set up Mollify development environment


= 1. Requirements =

	Mollify development environment requires following components:
  	* Eclipse IDE for Java EE (http://www.eclipse.org/downloads/)
  	* Google Eclipse Plugin (http://code.google.com/appengine/docs/java/tools/eclipse.html)
  	* Subversive plugin for Eclipse
  	* PHP enabled web server, such as WAMP/MAMP/LAMP

= 2. Component Installation =

=== 1. Eclipse ===
		
		Download and unpack Eclipse (remember to choose "Eclipse IDE for Java EE" instead of just "Eclipse IDE for Java") package into preferred location, Eclipse is ready to run.
		
=== 2. Google Eclipse Plugin ===
	
		Follow installation instructions here: http://code.google.com/appengine/docs/java/tools/eclipse.html
		
		Install components "Google Plugin for Eclipse [YOUR_ECLIPSE_VERSION]" and "Google Web Toolkit SDK [LATEST_GWT_VERSION]"
	
=== 3. Subversive ===

  	# Launch Eclipse, and open "Software Updates". Select "Install New Software"
  	# From the Eclipse update site, select "Collaboration/Subversive SVN Team Provider"
  	# Click "Install..."
  	# After installation and restart, Subversive will prompt for connector, install "SVNKit 1.3.0 Implementation"
  	# Open Eclipse preferences and select Team -> SVN -> SVN Connector, make sure there is a SVNKit 1.3.0 connector selected (if not, wrong combination of Subversive and SVN Connector was installed)

=== 4. Web server ===
	
		* WAMP: http://www.wampserver.com/en/
		* MAMP: http://www.mamp.info/en/index.html
		* LAMP: depends on distro, for example in Ubuntu: http://www.howtoforge.com/ubuntu_lamp_for_newbies

= 3. Setting up environment =

== 3.1 Mollify source directories ==

  	# Create a root directory for the project into preferred location, for example "`/Projects/Mollify`".
  	# Create a directory for Eclipse workspace under the root, for example "`/Projects/Mollify/ws`"
  	# Create a directory for version controlled source files under the root, for example "`/Projects/Mollify/svn`"
	
	It is important to keep workspace folder outside the version controlled source folder, as it contains personal settings and preferences, and should not be committed to version control.
	
== 3.2 Mollify sources ==

	Checkout the source trunk from Google Code svn repository using any preferred svn client. SVN urls and instructions can be found here: http://code.google.com/p/mollify/source/checkout
	
	For example, to checkout read-only version from command line, open console and go to source folder ("/Projects/Mollify/svn"), and run following command:
	
	{{{
	svn checkout http://mollify.googlecode.com/svn/trunk/ trunk-read-only
	}}}
	
	Members can checkout writable copy with command:
	
	{{{
	svn checkout https://mollify.googlecode.com/svn/trunk/ trunk --username [USERNAME]
	}}}
	
== 3.3 Setting up Eclipse project ==

  	# Launch Eclipse
  	# If Eclipse prompts for the workspace, select the the workspace folder created in step 3.1 ("/Projects/Mollify/ws"). If workspace is not prompted, select "File -> Switch Workspace", and choose the correct workspace folder.
  	# Import Mollify project with "File" -> "Import..." -> "General / Existing Projects into Workspace", and click "Next". As a root directory, select folder "/Projects/Mollify/svn/trunk/mollify" created in step 3.1. Mollify project should be listed, select it (NOTE! Don't click "Copy to workspace") and click "Finish" to import. Project is now listed in Project Explorer.

	Project is now configured.

== 3.4 Setting up version control in Eclipse ==
  	# Open Eclipse perspective "Team Synchronize", and click "Synchronize..." toolbar button.
  	# Select synchronization type "svn" and resources "mollify trunk", and click "Finish"
	
	Project appears into the Synchronize view. Any changes in the trunk can be updated simply by refreshing the view with F5 or by clicking "Synchronize", and then clicking "Update All Incoming Changes". Similarly, committing your changes is done by clicking "Commit All Outgoing Changes".
	
== 3.5 Running/Debugging Mollify in Eclipse ==

	First make sure your web server configuration is working by installing a Mollify release version as you would in a real web server host. Once you get the Mollify client running in browser, the backend can be used in development as well.
	
	GWT has a built-in web server for running servlet based projects, but it does not support PHP. On the other hand, same origin policy (SOP) prevents Mollify client from referring into PHP service located in different server. This is why Mollify development version must be configured to run on the same server where PHP files are located.

=== Step 1: Create Run Configuration ==
  	# Under folder "src/org.sjarvela.mollify" in Eclipse, copy "Dev.xml" to "App.gwt.xml" in same folder (if you already have "App.gwt.xml", skip this)
	# Open run Configuration management by selecting Run -> Run Configurations...
	# Select "Web Application" and click "New"
	# Enter name for configuration
	# Select project "mollify" via "Browse..."
	# Apply changes, and run it once. Mollify will not start yet, but this force Eclipse to build needed files under "war/org.sjarvela.mollify.App"

=== Step 2: Create Development Version of Backend ==
  	# Under your web server root, create a folder "mollify-dev"
	# From the Eclipse build folder ("war/org.sjarvela.mollify.App"), copy following files into this folder: "index.html", "hosted.html", "org.sjarvela.mollify.App.nocache.js"
	
	Open "index.html" for editing
		# Make sure it refers to the "org.sjarvela.mollify.App.nocache.js" in the same folder
		# Add/edit service location meta parameter
		
		{{{
		<meta name="mollify:property" content="service-path=[SERVICE_URL]">
		}}}
		
	 Service path is URL to backend files, which must be located in the same web server. Any backend installation can be used, but for development it is recommended to create a symbolic link from "svn/trunk/backend" into a folder under www root, and use url pointing into this. See chapter 3.6 for more information.

=== Step 3: Finish Run Configuration ==	

	# Open previously created run configuration for editing
	# Uncheck "Run built-in server"
	# In GWT tab, enter URL to the web folder created earlier (for example with MAMP "http://localhost:8888/mollify-dev")

== 3.6 Backend installation ==
	
	Running Mollify in Eclipse or browser requires backend installation in the web server, as it is in no way under GWT emulation. Backend always requires a PHP enabled web server, and a configuration as in production. In development environment it is recommended to create a symbolic link from version controlled backend folder into the web server root.
	
	For example, in Mac/Linux environments:
	
	{{{
	cd [WEB_SERVER_ROOT_HERE]
	ln -s [MOLLIFY_SOURCE_FOLDER_HERE]/svn/trunk/mollify/backend mollify
	}}}
	
	This creates a link from the trunk folder "backend" into a folder named "mollify" under the web root. This way, the service php file is accessible via url "http://localhost/mollify/service.php".
	
	Any changes in trunk are always reflected to the web server, no need to copy files manually.

= 4 Build script =

	Source root contains Ant build script (build.xml), which needs configuration specific properties file. Example properties file is located under folder "script" in source root. Copy this to the root folder of your Mollify project ("`/Projects/Mollify`"), and modify it as instructed.

	Script contains following targets:
	
== build ==

	Simply compiles the sources into the build folder under the root.

== deploy ==

	Compiles sources and creates deploy packages, both installation and source packages.

== update ==

	While developing client, it may be useful to try compiled version in a real browser instead of GWT emulator. This target automates this step that you don't have to compile and copy folders manually. In properties file, following paths must be defined:
  	* Absolute path to the Mollify project folder (for example "`/Projects/Mollify`")
  	* Absolute path to the web server root (for example "`/Applications/MAMP/htdocs`")

	This target compiles sources into javascript package and copies it to the web root. It also makes a symbolic link to the development version of the folder "themes", this way you can continue on editing the themes under the trunk, and changes are reflected to the web server.
	
	
	