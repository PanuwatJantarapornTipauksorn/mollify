#summary How to set up development environment

= Introduction =

This page describes how to set up Mollify development environment


= 1. Requirements =

	Mollify development environment requires following components:
  	* JDK 1.6
  	* Eclipse IDE for Java EE 3.5 (http://www.eclipse.org/downloads/)
  	* Google Web Toolkit 2.0.4 and Google Eclipse Plugin 3.5 (http://code.google.com/appengine/docs/java/tools/eclipse.html)
  	* PHP enabled web server, such as WAMP/MAMP/LAMP

= 2. Component Installation =

=== 1. Eclipse ===
		
		Download and unpack Eclipse (remember to choose "Eclipse IDE for Java EE" instead of just "Eclipse IDE for Java") package into preferred location, Eclipse is ready to run.
		
=== 2. Google Eclipse Plugin ===
	
		Follow installation instructions here: http://code.google.com/appengine/docs/java/tools/eclipse.html
		
		Install components "Google Plugin for Eclipse" and "Google Web Toolkit SDK"
	
=== 3. Subversive ===

  	# Launch Eclipse, and open "Software Updates". Select "Install New Software"
  	# From the Eclipse update site, select "Collaboration/Subversive SVN Team Provider"
  	# Click "Install..."
  	# After installation and restart, Subversive will prompt for connector, install "SVNKit 1.3.0 Implementation"
  	# Open Eclipse preferences and select Team -> SVN -> SVN Connector, make sure there is a SVNKit 1.3.0 connector selected (if not, wrong combination of Subversive and SVN Connector was installed)

=== 4. Web server ===
	
		* WAMP: http://www.wampserver.com/en/
		* MAMP: http://www.mamp.info/en/index.html
		* LAMP: depends on distro, for example in Ubuntu: http://www.howtoforge.com/ubuntu_lamp_for_newbies

= 3. Setting up environment =

== 3.1 Mollify source directories ==

  	# Create a root directory for the project into preferred location, for example "`/Projects/Mollify`".
  	# Create a directory for Eclipse workspace under the root, for example "`/Projects/Mollify/ws`"
  	# Create a directory for version controlled source files under the root, for example "`/Projects/Mollify/svn`"
	
	It is important to keep workspace folder outside the version controlled source folder, as it contains personal settings and preferences, and should not be committed to version control.
	
== 3.2 Mollify sources ==

	Checkout the source trunk from Google Code svn repository using any preferred svn client. SVN urls and instructions can be found here: http://code.google.com/p/mollify/source/checkout
	
	For example, to checkout read-only version from command line, open console and go to source folder ("/Projects/Mollify/svn"), and run following command:
	
	{{{
	svn checkout http://mollify.googlecode.com/svn/trunk/ trunk-read-only
	}}}
	
	Members can checkout writable copy with command:
	
	{{{
	svn checkout https://mollify.googlecode.com/svn/trunk/ trunk --username [USERNAME]
	}}}
	
== 3.3 Setting up Eclipse project ==

  	# Launch Eclipse
  	# If Eclipse prompts for the workspace, select the the workspace folder created in step 3.1 ("/Projects/Mollify/ws"). If workspace is not prompted, select "File -> Switch Workspace", and choose the correct workspace folder.
  	# Import Mollify project with "File" -> "Import..." -> "General / Existing Projects into Workspace", and click "Next". As a root directory, select folder "/Projects/Mollify/svn/trunk/mollify" created in step 3.1. Mollify project should be listed, select it (NOTE! Don't click "Copy to workspace") and click "Finish" to import. Project is now listed in Project Explorer.

  	Open Project Properties, and
  	# in Google -> Web Toolkit, make sure  "Use Google Web Toolkit" is checked, and that the SDK version is the one listed above
  	# in Java Build Path -> Libraries, make sure JRE version is 1.6 (and if not, add it from "Add Library -> JRE System Library"
  	# in Java Build Path -> Libraries, make sure following jars are listed: `aopalliance.jar, gin.jar, guice-2.0.jar, gwt-dnd-r1015.jar, gwt-log-2.6.2.jar, gwt-plupload.jar, junit-4.6.jar`. If these are not listed, add them by clicking "Add JARs" and browse to "mollify/lib"
  	# in Java Build Path -> Source, make sure you have two source folders: "mollify/src" and "mollify/test"
  	# in Java Compiler -> Errors/Warnings, and mark "Unchecked generic type operations" and "Usage of raw type" as ignored

	Project is now configured.

	If you see warnings "The following classpath entry xxx.jar will not be available on the server's classpath" in problems view, you can safely remove them using the quick fix option.

== 3.4 Setting up version control in Eclipse ==
  	# Open Eclipse perspective "Team Synchronize", and click "Synchronize..." toolbar button.
  	# Select synchronization type "svn" and resources "mollify trunk", and click "Finish"
	
	Project appears into the Synchronize view. Any changes in the trunk can be updated simply by refreshing the view with F5 or by clicking "Synchronize", and then clicking "Update All Incoming Changes". Similarly, committing your changes is done by clicking "Commit All Outgoing Changes".
	
== 3.5 Running/Debugging Mollify in Eclipse ==

	First make sure your web server configuration is working by installing a Mollify release version as you would in a real web server host.

=== Step 1: Setup Web Server ===
  	# Under your web server root, create a Mollify folder "mollify/dev"
  	# From examples, copy host page into Mollify folder
  	# Under Mollify folder, create folders "client" and "backend"

=== Step 2: Create Run Configuration ==
	# Open run Configuration management by selecting Run -> Run Configurations...
	# Select "Web Application" and click "New"
	# Enter name for configuration
	# Select project "mollify" via "Browse..."
	# In the tab "Server", uncheck "Run built-in server"
	# In the tab "GWT", enter URL into Mollify folder created in step 1 (for example "http://localhost/mollify/dev")
	# In the tab "GWT", add/remove modules so there are only "`DevelopmentClient`" and "`Client`"
	# Apply changes, and run it once. Mollify will not start yet, but this forces Eclipse to build needed files under "war/org.sjarvela.mollify.App"

=== Step 2: Setup Client in Web Server ===
	From the Eclipse build folder ("war/org.sjarvela.mollify.App"), copy everything into web server client folder.

=== Step 4: Setup Backend in Web Server ===
	Either copy all backend files from svn copy into web server backend folder, or create a symbolic link replacing the created backend folder.

	Latter should be used if backend is being developed, this way all the changes made reflect directly to the svn copy, and when new changes are updated from svn, there is no need to update manually.

	Also, create a configuration.php just like in a regular installation.

=== Step 5: Run the Application ===
	To run Mollify, start up the run configuration created in step 2. This will open the development mode tool, copy the url it provides into your browser.

	When run for the first time, browser needs to install the GWT plugin, just follow the instructions.

== 3.4 Theme Development ==

For developing themes, folders "include" and "themes" in web server client folder should be replaced with a symbolic link from the svn copy.

= 4 Build script =

	Source root contains Ant build script (build.xml), which needs configuration specific properties file.

	Example properties file is located under folder "examples" in source root. Copy this to the root folder of your svn copy (right next to build.xml), and edit the variables:
	* *`gwt.sdk.location`* This is the absolute path to the GWT SDK. If you installed it via Eclipse, it is found under Eclipse plugins. For example `/Applications/eclipse/plugins/com.google.gwt.eclipse.sdkbundle.2.0.4_2.0.4.v201006301254/gwt-2.0.4`
	* *`root.dir`* This is the source root dir, where build.xml is located
	* *`deploy.dir`* This is the deploy dir, where the deployment package is created
	* *`mollify.version`* This is the version used for deployment package

== 4.1. Targets ==
	
=== build ===

	Simply compiles the sources into the build folder under the root.

=== deploy ===

	Compiles sources and creates deploy packages, both installation and source packages.
	
	