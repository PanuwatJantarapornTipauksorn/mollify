#summary Installation instructions
#labels Phase-Deploy

= 1. Installation =

1) Untar package contents

	{{{tar -xzvf mollify_VER.tar.gz}}}

	This will extract two directories:
	  * "mollify": Application host page and backend service files
	  * "org.sjarvela.mollify.App": Client application files

2) Copy extracted directories into your web server root directory

3) Create configuration file "configuration.php" under directory "mollify", for further instructions see chapter 2.

4) You are ready to go. Open address http://your.host.name/mollify to see your files.

----

= 2. Configuration =

Backend file "configuration.php" contains all configuration properties needed by Mollify. Configuration depends on whether it is for single-user or multi-user environment.


== 2.1 Users ==

Mollify supports both single-user and multi-user environments. In single-user environment, no authentication is required and all access rules apply to everybody. In multi-user environment different user accounts are set up, where different users can have different published directories and different access permissions.

=== 2.1.1 Single-User Environment ===

To set up a single-user environment, make sure variable $USERS in file "configuration.php" is empty or not defined.

For example:

{{{ $USERS = array();}}}

=== 2.1.2 Multi-User Environment ===

To set up a multi-user environment, you have to define user accounts with variable $USERS in file "configuration.php".

Syntax is:

{{{
$USERS = array(
	[USER_ID] => array("name" => [USER NAME], "password" => [PASSWORD]),
	...
);
}}}

For example:

{{{
$USERS = array(
	"1" => array("name" => "User 1", "password" => "foo"),
	"2" => array("name" => "User 2", "password" => "bar")
);
}}}

This configuration has two users, "User 1" and "User 2".

Rules for user configuration:
  * User id's `[USER_ID]` can be freely chosen, but they must be unique (as all user related data is linked with user id)
  * User names `[USER NAME]` can be freely chosen, but they must be unique (as user is identified with user name when logged in)


== 2.2 Published Directories ==

Mollify supports freely selectable published directories, which need not to have any relation with each other.

Also, in multi-user environment, each user can have different set of directories available.

=== 2.2.1 Single-User Environment ===

In single-user environment (see chapter 2.1, Users), use following format to define published directories:

{{{
$PUBLISHED_DIRECTORIES = array(
	[DIR_ID] => array("name" => [DIR_NAME], "path" => [DIR_PATH]),
	...
);
}}}

See rules below.

=== 2.2.2 Multi-User Environment ===

In multi-user environment (see chapter 2.1, Users), use following format to define published directories:

{{{
$PUBLISHED_DIRECTORIES = array(
	[USER_ID] => array(
		[DIR_ID] => array("name" => [DIR_NAME], "path" => [DIR_PATH]),
		...
	),
	...
);
}}}

For example:

{{{
$PUBLISHED_DIRECTORIES = array(
	"1" => array(
		"r1" => array("name" => "Folder A", "path" => "/foo/bar"),
		"r2" => array("name" => "Folder B", "path" => "/foo/bay")
	),
	"2" => array(
		"r1" => array("name" => "Folder A", "path" => "/foo/bat"),
		"r2" => array("name" => "Folder C", "path" => "/foo/baz")
	)
);
}}}

With this configuration
  * User with id "1" (defined in user configuration) has two visible directories: "Folder A" and "Folder B"
  * User with id "2" (defined in user configuration) has two visible directories: "Folder A" and "Folder C"
  * Although "Folder A" exists in both users, they may point to different physical folder

Rules are:
  * User id `[USER_ID]` must exist in user configuration (see chapter 2.1)
  * Directory id's `[DIR_ID]` can be freely chosen, but they must be unique within user (two users can have same id's)
  * Path `[DIR_PATH]` must be absolute path in local file system
  * Actual file system folder name is not shown to user, but instead the name `[DIR_NAME]` defined in the configuration


*NOTE!* Currently all files and directories are recursively exposed, so carefully select your configuration.


== 2.3 User Access Control ==

Mollify supports configurable user access control for files. By default, when no configuration is done, users have read-only permissions to all files.

File permissions can be granted in two levels:
  * User default file permission
  * File specific file permission

Possible file permission values are:
  * `RO` = Read-only (user can only download and view details)
  * `RW` = Read and write (user can also rename and delete file)

=== 2.3.1 User Default File Permission in Single-User Environment ===

In single-user environment, default file permission applies to everybody, and it is defined with configuration variable `$FILE_PERMISSION_MODE`.

For example:

{{{
    $FILE_PERMISSION_MODE = "RW";
}}}

This will give all users read/write permissions, unless file specific permissions override this.

=== 2.3.2 User Default File Permission in Multi-User Environment ===

In multi-user environment, default file permission is defined in user account configuration with attribute `file_permission_mode`.

For example:

{{{
	$USERS = array(
		"1" => array("name" => "User 1", "password" => "foo", "file_permission_mode" => "RW"),
		"2" => array("name" => "User 2", "password" => "bar", "file_permission_mode" => "RO")
	);
}}}

This configuration gives "User 1" read/write permissions, and "User 2" read-only permissions, unless file specific permissions override these.

In addition to default permission modes, in multi-user environment user can be set to admin mode with value "A". Admin users are allowed to access everything regardless of file permission configurations. Later on, admin users will also have options and actions available that are not visible for non-admins.

For example:

{{{
	$USERS = array(
		"1" => array("name" => "User 1", "password" => "foo", "file_permission_mode" => "A"),
		"2" => array("name" => "User 2", "password" => "bar", "file_permission_mode" => "RO")
	);
}}}

This would make "User 1" an admin user.

=== 2.3.3 File Specific Permissions ===

Mollify supports file specific file permissions, which override any possible default permissions. File specific permissions are defined in folder level (no inheritance in folder hierarchy), with a user access control file (see [http://code.google.com/p/mollify/wiki/UserAccessControlFiles wiki page] for more information).

Each folder has its own user access control file, which applies only to files in that folder.

Each file can have permissions set to user id's (see chapter 2.1 Users):
  * With user id "`*`", setting applies to all users overriding possible user default permission
  * With user specific id, setting applies only to user with that id, overriding any possible default settings (either with user id "`*`", or in user account configuration)
  * In single-user environment, only permissions given with id "`*`" are applied

Example scenarios:
  * User has default permission "RO", file has permission "`* = RW`": User will get read and write permissions
  * User has default permission "RW", file has permission "`* = RO`": User will get read-only permissions
  * User with id "U1" has default permission "RW", file has permissions "`* = RW`" and "`U1 = RO`": User will get read-only permissions


== 2.4 File Upload ==

=== 2.4.1 Disabling File Upload ===

By default, file upload feature is enabled. To disable this feature, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_file_upload" => FALSE
	);
}}}

=== 2.4.2 Enabling File Upload Progress ===

By default, file upload progress is disabled. To enable this feature, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_file_upload_progress" => TRUE
	);
}}}

*NOTE!* File upload progress display requires APC (Alternative PHP Cache), see [http://code.google.com/p/mollify/wiki/HowToEnableUploadProgressDisplay wiki page] for more information


== 2.5 Folder Actions ==

Mollify supports folder actions, ie. creating, renaming and deleting folders.

=== 2.5.1 Disabling Folder Actions ===

By default, folder actions are enabled. To disable folder actions, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_folder_actions" => FALSE
	);
}}}

=== 2.5.2 Folder Action User Permissions ===

At the moment, folder actions are available to all users with user default file permissions set to read/write (see chapter 2.3 User Access Control).

This is:
  * In single-user permission when user default file permission mode is set to read/write (RW). Note that in this case all users are allowed to create, rename and delete folders.
  * In multi-user permission when user default file permission is set to read/write (RW) or admin (A).

== 2.6 Zip Downloads ==

Mollify supports downloading files and folders in zipped package.

=== 2.6.1 Enabling Zip Downloads ===

By default, zip downloads are disabled. To enable zip downloads, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_zip_download" => TRUE
	);
}}}

=== 2.6.2 Additional Zip Download Options ===

Depending on your web server configuration, using zip downloading might require changing configuration:

*1) File size limitation*

Usually PHP configurations limit the amount of memory any PHP script can reserve. Mollify zip packages are created in memory, and if the file size is greater than what PHP allows to reserve, operation will fail.

To fix this, there are two options: to change the PHP setting, or to set Mollify to read files in smaller parts.

  * To change PHP memory limit, change PHP directive controlling maximum memory reservable "`memory_limit`", see [http://fi2.php.net/ini.core PHP documentation] for more information.

  * To set the size of the file parts read, define ZIP_OPTIONS setting for "large_file_size" in Mollify "configuration.php".

For example, if PHP configuration sets the memory limit to 8M, use following setting in Mollify "configuration.php" to split file reading in 7M parts:

{{{
	$ZIP_OPTIONS = array("large_file_size" => 7 * 1024 * 1024);
}}}

*2) Execution time*

As well as memory limit, PHP may also limit the maximum time a script can execute.

Since zip packages are created in memory and streamed on-the-fly, it may take a long time to zip large files or folders. If this time exceeds the maximum time set in PHP, download will fail.

PHP directive controlling this limit is "`max_execution_time`", see [http://fi2.php.net/manual/en/info.configuration.php#ini.max-execution-time PHP documentation] for more information.
----


= 3. Modifying Installation =
== Changing the theme ==

	Default theme used is basic theme deployed in the package. If you wish to change the theme, you can define it with following property in host page:

{{{
	<html>
		<head>
			...
			<meta name="mollify:property" content="theme=[PATH_TO_THEME_CSS]">
		</head>
		...
	</html>
}}}

Value `PATH_TO_THEME_CSS` can be relative or absolute path, but it must point into a css file. If it is relative, it will be relative to the host page.

NOTE! If you define multiple `mollify:property` values, use single line and separate values with semi-colon. For example `name1=value1;name2=value2,...`

== Relocating host page or backend interface files ==

	Host page can be located anywhere, the only thing that matters is that backend interface files (`*`.php) are located under the same directory or its subdirectories.

	If you wish to locate backend interface files (`*`.php) into a subdirectory, you must define this location in the host html file, with following format:

{{{
	<html>
		<head>
			...
			<meta name="mollify:property" content="service-path=[RELATIVE_PATH]">
		</head>
		...
	</html>
}}}

	Replace `[RELATIVE_PATH]` with path to the backend interface files, relative to the host file. Note that path can only descend, you cannot go upwards in the folder hierarchy, and thus all leading dots and slashes are removed ("." and "/").

	For example,
	if you place host file in `http://your_host_name/mollify.html` and the backend interface files into `http://your_host_name/mollify/scripts/`, the setting should be as follows:

{{{
	<meta name="mollify:property" content="service-path=mollify/scripts">
}}}


NOTE! If you define multiple `mollify:property` values, use single line and separate values with semi-colon. For example `name1=value1;name2=value2,...`

== Relocating client application files ==

	Client application files can be located anywhere, only the javascript reference in the host page
	must be updated to match the new location. While the location and the name of the folder "org.sjarvela.mollify.App" can be
	changed, do not alter its contents.

== Customizing Mollify host page, or integrating Mollify into existing web page ==

	Host page structure can be freely modified, as long as following rules are met:
	  * Javascript file "org.sjarvela.mollify.App.nocache.js" must be linked
	  * In the page, there must be a div with id "mollify". Application is injected inside this element.
	
	Optionally
	  * If you wish to choose the language, include meta information in the head section
	  * If you wish to support browser history, keep the iframe element with id "__gwt_historyFrame"