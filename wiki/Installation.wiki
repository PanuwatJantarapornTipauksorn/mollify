#summary Installation instructions
#labels Phase-Deploy

= 1. Installation =

1) Untar package contents

		{{{tar -xzvf mollify_VER.tar.gz}}}

		This will extract two directories:
		  * "mollify": Application host page and backend service files
		  * "org.sjarvela.mollify.App": Client application files

2) Copy extracted directories into your web server root directory

3) Create configuration file "configuration.php" under directory "mollify", for further instructions see chapter 2.

4) You are ready to go. Open address http://your.host.name/mollify to see your files.

----

= 2. Configuration =

	Backend file "configuration.php" contains all configuration properties needed by Mollify. Configuration depends on whether it is for single-user or multi-user environment.
	
	In single-user environment, no authentication is required and all access rules apply to everybody. In multi-user environment different user accounts are set up, where different users can have different published directories and different access permissions.
	
	Follow configuration instructions based on user mode:
	 * [ConfigurationSingleUserMode Single-user mode]
	 * [ConfigurationMultiUserMode Multi-user mode]
	
	Also, see instructions on [ConfigurationAdditionalOptions additional configuration options].

----

= 3. Modifying Installation =

== 3.1 Relocating host page or backend interface files ==

	Host page can be located anywhere, the only thing that matters is that backend interface files (`*`.php) are located under the same directory or its subdirectories.

	If you wish to locate backend interface files (`*`.php) into a subdirectory, you must define this location in the host html file, with following format:

{{{
	<html>
		<head>
			...
			<meta name="mollify:property" content="service-path=[RELATIVE_PATH]">
		</head>
		...
	</html>
}}}

	Replace `[RELATIVE_PATH]` with path to the backend interface files, relative to the host file. Note that path can only descend, you cannot go upwards in the folder hierarchy, and thus all leading dots and slashes are removed ("." and "/").

	For example,
	if you place host file in `http://your_host_name/mollify.html` and the backend interface files into `http://your_host_name/mollify/scripts/`, the setting should be as follows:

{{{
	<meta name="mollify:property" content="service-path=mollify/scripts">
}}}

== 3.2 Relocating client application files ==

	Client application files can be located anywhere, only the javascript and theme css references in the host page
	must be updated to match the new location. While the location and the name of the folder "org.sjarvela.mollify.App" can be
	changed, do not alter its contents.

== 3.3 Customizing Mollify host page, or integrating Mollify into existing web page ==

	Host page structure can be freely modified, as long as following rules are met:
	  * Javascript file "org.sjarvela.mollify.App.nocache.js" must be linked
	  * In the page, there must be a div with id "mollify". Application is injected inside this element.
	
	Optionally
	  * If you wish to choose the language, include meta information in the head section
	  * If you wish to support browser history, keep the iframe element with id "__gwt_historyFrame"

----

= 4. Client Logging =

	Mollify has support for client side logging, which makes it possible to troubleshoot any problems when backend log is not accessible or does not reveal anything.

	Logging can be enabled with following property in host page head section:

{{{
<meta name="gwt:property" content="log_level=DEBUG">
}}}

	When Mollify is opened with logging enabled, a log panel is visible on the screen. It can be dragged and resized, and log level can also be changed by clicking log level buttons (DEBUG/ERROR/WARN/INFO/OFF).

----

= 5. Demo Mode =

	For demonstration and theme development purposes, Mollify has built-in standalone demo mode.

	It can be set up with following property in host page head section:

{{{
<meta name="gwt:property" content="demo=true">
}}}

	In demo mode, client does not require backend, but will function entirely on demo data. Demo mode simulates multi-user environment, where login accepts any user. All actions are available, but don't actually affect anything.