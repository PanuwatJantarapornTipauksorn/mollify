#summary Troubleshooting errors
#labels Phase-Deploy,Featured

= Troubleshooting =

In case of errors, first check most common errors below.

If none of those help with your problem, do following steps before reporting new issue:

1. Enable server side logging by adding following setting in configuration.php:

{{{
	$SETTINGS = array(
		"debug" => TRUE
	);
}}}
If you have other settings already, add this to the same list, for example:
{{{
	$SETTINGS = array(
		"enable_file_upload" => TRUE,
		"enable_zip_download" => TRUE,
		"debug" => TRUE
	);
}}}

2. Recreate the error situation

3. Open url in your browser: http://yourhost/backend/r.php/debug

4. Copy the debug info displayed and attach into error report

NOTE! Once the logs are reported, remember to remove server side logging option as it generates lots of log entries.

=== Client side debugging ===

Sometimes server side debug log is not enough to solve problems, and then you need to install debug client that provides also client side debug information.

1. Download debug client from http://code.google.com/p/mollify/downloads/list (select the debug client for the same version as installed)

2. In Mollify installation directory create a new folder called "debug-client"

3. Unzip the package into created folder

4. Modify host page and add this line
{{{
<meta name="gwt:property" content="log_level=DEBUG">
}}}
and then modify the client script location to use the debug client instead
{{{
<script type="text/javascript" language="javascript" src="client/org.sjarvela.Mollify.nocache.js"></script>
}}}
into
{{{
<script type="text/javascript" language="javascript" src="debug-client/org.sjarvela.Mollify.nocache.js"></script>
}}}

Once the debug client is installed, you should see the debug window. Recreate the error, and copy all the logging information into the issue report


----


= Most Common Errors =

== Server error "Cannot modify header information" ==

Server error "Cannot modify header information, headers already sent" means PHP output is started prematurely before the Mollify session is initialized.

Usually this is due to following content in `configuration.php` file:
  * there are extra characters outside php tags: spaces, line feeds, tabs etc.
  * the file has been saved in UTF-8 without BOM information

== Timezone error in log, or file popup does not work properly ==

Mollify uses PHP date function to get file modification timestamp, but if PHP timezone has not been set, this function will cause an error.

To add timezone, either edit PHP.ini and add setting "date.timezone", or add Mollify setting "timezone" in configuration.php. Possible values for both can be found from http://php.net/manual/en/timezones.php

{{{
	$SETTINGS = array(
		"timezone" => "Europe/Helsinki"
	);
}}}

== Some operations, like rename or editing descriptions, don't work ==

Mollify uses REST HTTP protocol for the requests, which means all HTTP methods (ie. GET, PUT, POST and DELETE) must be supported by the web server. If these are not supported, many operations will fail (error in the server log indicate protocol error or missing resource).

To fix this, Mollify can be set to operate on limited HTTP methods mode by adding following server setting: 
{{{
	$SETTINGS = array(
		"enable_limited_http_methods" => TRUE
	);
}}}

and following client setting into the host page:
{{{
	<meta name="mollify:property" content="limited-http-methods=true">
}}}

== Downloaded files are corrupted ==

Make sure configuration.php does not have any characters outside <?php - ?> tags, including spaces or line feeds. These characters are interpreted as output, and will corrupt file downloads.


== Error "Failed to get response from server" ==

When response failure error occurs, it is due to either of two things:

a) *Client cannot connect to the server*

b) *Client can connect to server, but server never responds*

In both cases, it is always best to first check PHP error log, usually the reason can be found there.

If there are no PHP error log entries, it is case of client cannot connect to server (ie. it tries to access backend interface files in a wrong place). If possible, you should check your web server access logs to see what resource it tries to access. Also check your backend interface file locations (see [http://code.google.com/p/mollify/wiki/Installation Installation wiki]), that it is set up properly.

In such error cases, it may be useful to see client logs, see [http://code.google.com/p/mollify/wiki/ConfigurationAdditionalOptions configuration wiki] (chapter 6.2, Client Logging) for more information. [http://getfirebug.com/ Firebug] plugin for Firefox browser is also very good tool for investigating what resources a page tries to access.

If, on the other hand, PHP log reveals errors, it is a case of invalid system setup or configuration.

Common PHP errors and their reasons are:
  * `Call to undefined function:  json_encode()`: PHP version is lower than 5.2, and is not supported


== Nothing happens on zip download, or downloaded zip is unreadable ==

When a file or a folder is downloaded as zip package and nothing happens or downloaded zip cannot be read, zip package processing fails. Check your PHP error log, and see [http://code.google.com/p/mollify/wiki/Installation Installation wiki] for more information about zip options.