#summary Additional configuration options

= 1. File Upload =

== 1.1. Disabling File Upload ==

	By default, file upload feature is enabled. To disable this feature, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_file_upload" => FALSE
	);
}}}

== 1.2. Enabling File Upload Progress ==

	By default, file upload progress is disabled. To enable this feature, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_file_upload_progress" => TRUE
	);
}}}

	NOTE! File upload progress display requires APC (Alternative PHP Cache), see [http://code.google.com/p/mollify/wiki/HowToEnableUploadProgressDisplay wiki page] for more information


= 2. Folder Actions =

	Mollify supports folder actions, ie. creating, renaming and deleting folders.

== 2.1. Disabling Folder Actions ==

	By default, folder actions are enabled. To disable folder actions, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_folder_actions" => FALSE
	);
}}}

== 2.2. Folder Action User Permissions ==

	At the moment, folder actions are available to all users with user default file permissions set to read/write (see chapter 2.3 User Access Control).

	This is:
	  * In single-user permission when user default file permission mode is set to read/write (RW). Note that in this case all users are allowed to create, rename and delete folders.
	  * In multi-user permission when user default file permission is set to read/write (RW) or admin (A).

= 3. Zip Downloads =

	Mollify supports downloading files and folders in zipped package.

== 3.1. Enabling Zip Downloads ==

	By default, zip downloads are disabled. To enable zip downloads, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_zip_download" => TRUE
	);
}}}

== 3.2. Additional Zip Download Options ==

	Depending on your web server configuration, using zip downloading might require changing configuration:

*1) Execution time*

	PHP may limit the maximum time a script can execute.

	Since zip packages are created in memory and streamed on-the-fly, it may take a long time to zip large files or folders. If this time exceeds the maximum time set in PHP, download will fail.

	PHP directive controlling this limit is "`max_execution_time`", see [http://fi2.php.net/manual/en/info.configuration.php#ini.max-execution-time PHP documentation] for more information.

== 4. Description Update ==

	Mollify supports editing descriptions directly from client (only for administrator users), and keep descriptions updated on file operations, such as rename, move and delete.
	
	For MySQL configuration, this feature is enabled by default, but for file configuration this has to be explicitly enabled. Reason for this is file based descriptions requires significant amount of file operations.
	
	To enable description update, use following setting in "configuration.php":

	{{{
		$SETTINGS = array(
			"enable_description_update" => TRUE
		);
	}}}

== 5. Permission Update ==

	Mollify supports editing permissions directly from client (only for administrator users).
	
	For MySQL configuration, this feature is enabled by default, but for file configuration this has to be explicitly enabled. Reason for this is file based permissions requires significant amount of file operations.
	
	To enable permission update, use following setting in "configuration.php":

	{{{
		$SETTINGS = array(
			"enable_permission_update" => TRUE
		);
	}}}

== 6. Other Backend Options ==

=== 6.1. Password hashing ===

	By default, passwords are stored in plain text format in `configuration.php`. While this does not create any security risk, you can optionally store passwords in hashed format.

	To do so, add following setting in `configuration.php`:

{{{
$PASSWORDS_HASHED = TRUE;
}}}

	This indicates that passwords given are handled as MD5 hashed. Note that you have to generate hashed passwords manually, for example with [http://www.miraclesalad.com/webtools/md5.php this] online service.

=== 6.2. Disabling change password option ===

	By default, users are allowed to change their passwords (if configuration supports this). If required, this option can be disabled with following setting in "configuration.php":

	{{{
		$SETTINGS = array(
			"enable_change_password" => FALSE
		);
	}}}

=== 6.3. Limiting allowed file upload types ===

	By default, all types of files are allowed to upload. If required, file types can be limited with following setting in "configuration.php":

	{{{
		$SETTINGS = array(
			"allowed_file_upload_types" => array(".gif", ".png")
		);
	}}}

=== 6.4. Multiple installations in one site ===

	Mollify uses PHP sessions, which contain information about the configuration. Installing multiple instances of Mollify would use the same session information, unless installations are identified. To do so, use with following setting in "configuration.php":

	{{{
		$SETTINGS = array(
			"session_name" => "1"
		);
	}}}

	The value for the session name is freely selectable, different instances just need to have unique value. It could be, a running number ("1", "2" etc), or perhaps something that describes the purpose of the instance, like "MOLLIFY_PUBLIC", "MOLLIFY_LOCAL" etc.

=== 6.4. Event logging ===

	To enable event logging, add with following setting in "configuration.php":

	{{{
		$SETTINGS = array(
			"enable_event_logging" => "TRUE"
		);
	}}}

	By default, all events are logged. To control what events are logged, use following setting:
	{{{
		$SETTINGS = array(
			"logged_events" => array("filesystem/", "session/")
		);
	}}}

	All events that has matching id will be logged (wildcard match is done automatically).

	Events can be viewed in administration utility.

= 7. Client Options =

== 7.1. File uploader ==

	By default, Mollify uses basic HTTP file uploader. It is guaranteed to work on all browsers, but for displaying upload progress, server side support is required. Alternatively, a flash uploader or Plupload uploader can be used. They have more features, for example selecting multiple files at once, showing individual file upload progress, but requires more from the browser.

== 7.1.1. Flash uploader ===

	If flash uploader is preferred, add following setting in host page:

{{{
<meta name="mollify:property" content="file-uploader=flash">
}}}

	Also the javascript library needs to be loaded with following line:

{{{
<script type="text/javascript" language="javascript" src="[PATH_TO_CLIENT_FILES]/swfupload.js"></script>
}}}

	The path used is the same than what is used for loading the Mollify app javascript (org.sjarvela.Mollify.nocache.js).

== 7.1.2. Plupload uploader ===

	Plupload is external upload component, see [http://www.plupload.com]

	If Plupload uploader is preferred, add following setting in host page:

{{{
<meta name="mollify:property" content="file-uploader=plupload">
}}}

	Also the javascript library needs to be loaded with following line:

{{{
<script type="text/javascript" language="javascript" src="[PATH_TO_CLIENT_FILES]/plupload.full.min.js"></script>
}}}

	By default, all runtimes (see Plupload site for more information) are enabled. To customize enabled runtimes or their preferred order, use following parameter:

{{{
<meta name="mollify:property" content="plupload-runtimes=flash,browserplus,html5">
}}}

	Plupload supports chunked uploads, ie files are upload in small chunks, and allows uploading files larger than max upload size set by server. To set chunk size, use following parameter:

{{{
<meta name="mollify:property" content="plupload-chunk-size=1mb">
}}}

== 7.2. Request timeout ==

	By default, client requests timeout after 5 seconds if no response has been received. This timeout should be adequate for all environments, but if needed, this can be changed with following setting:

{{{
<meta name="mollify:property" content="request-timeout=8">
}}}

	Value given is timeout in seconds.

== 7.3. Default Login Screen ==

	Mollify has a default login screen which is shown when Mollify is accessed and no login has been done. To create a custom login screen etc., this can be disabled with following parameter in host page head section:

{{{
<meta name="mollify:property" content="show-login=false">
}}}

An example of creating a custom login page can be found in downloads section.


= 8. Demo Mode =

	For demonstration and theme development purposes, Mollify has built-in standalone demo mode. In demo mode, client does not require backend, but will instead function entirely on demo data. All actions are available, but don't actually affect anything.

	Demo mode can be set up with following property in host page head section:

{{{
<meta name="gwt:property" content="demo=true">
}}}

	If not set otherwise, demo mode simulates multi-user environment (accepts login "demo/demo").

	To use single-user mode, add following property in host page head section:

{{{
<meta name="mollify:property" content="multi-user=false">
}}}