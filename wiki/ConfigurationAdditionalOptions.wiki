#summary Additional configuration options

= 1. File Upload =

== 1.1. Disabling File Upload ==

	By default, file upload feature is enabled. To disable this feature, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_file_upload" => FALSE
	);
}}}

== 1.2. Enabling File Upload Progress ==

	By default, file upload progress is disabled. To enable this feature, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_file_upload_progress" => TRUE
	);
}}}

	NOTE! File upload progress display requires APC (Alternative PHP Cache), see [http://code.google.com/p/mollify/wiki/HowToEnableUploadProgressDisplay wiki page] for more information


= 2. Folder Actions =

	Mollify supports folder actions, ie. creating, renaming and deleting folders.

== 2.1. Disabling Folder Actions ==

	By default, folder actions are enabled. To disable folder actions, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_folder_actions" => FALSE
	);
}}}

== 2.2. Folder Action User Permissions ==

	At the moment, folder actions are available to all users with user default file permissions set to read/write (see chapter 2.3 User Access Control).

	This is:
	  * In single-user permission when user default file permission mode is set to read/write (RW). Note that in this case all users are allowed to create, rename and delete folders.
	  * In multi-user permission when user default file permission is set to read/write (RW) or admin (A).

= 3. Zip Downloads =

	Mollify supports downloading files and folders in zipped package.

== 3.1. Enabling Zip Downloads ==

	By default, zip downloads are disabled. To enable zip downloads, use following setting in "configuration.php":

{{{
	$SETTINGS = array(
		"enable_zip_download" => TRUE
	);
}}}

== 3.2. Additional Zip Download Options ==

	Depending on your web server configuration, using zip downloading might require changing configuration:

*1) Execution time*

	PHP may limit the maximum time a script can execute.

	Since zip packages are created in memory and streamed on-the-fly, it may take a long time to zip large files or folders. If this time exceeds the maximum time set in PHP, download will fail.

	PHP directive controlling this limit is "`max_execution_time`", see [http://fi2.php.net/manual/en/info.configuration.php#ini.max-execution-time PHP documentation] for more information.

== 3.3. Other Backend Options ==

=== 3.3.1. Password hashing ===

	By default, passwords are stored in plain text format in `configuration.php`. While this does not create any security risk, you can optionally store passwords in hashed format.

	To do so, add following setting in `configuration.php`:

{{{
$PASSWORDS_HASHED = TRUE;
}}}

	This indicates that passwords defined are handled as MD5 hashed.

= 4. Client Options =

== 4.1. Request timeout ==

	By default, client requests timeout after 5 seconds if no response has been received. This timeout should be adequate for all environments, but if needed, this can be changed with following setting:

{{{
<meta name="mollify:property" content="request-timeout=8">
}}}

	Value given is timeout in seconds.

== 4.2. Logging ==

	Mollify has support for client side logging, which makes it easier to troubleshoot any problems when backend log is not accessible or does not reveal anything.

	Logging can be enabled with following property in host page head section:

{{{
<meta name="gwt:property" content="log_level=DEBUG">
}}}

	When Mollify is opened with logging enabled, a log panel is visible on the screen. It can be dragged and resized, and log level can also be changed by clicking log level buttons (DEBUG/ERROR/WARN/INFO/OFF).



= 5. Demo Mode =

	For demonstration and theme development purposes, Mollify has built-in standalone demo mode. In demo mode, client does not require backend, but will instead function entirely on demo data. All actions are available, but don't actually affect anything.

	Demo mode can be set up with following property in host page head section:

{{{
<meta name="gwt:property" content="demo=true">
}}}

	If not set otherwise, demo mode simulates multi-user environment (accepts login "demo/demo").

	To use single-user mode, add following property in host page head section:

{{{
<meta name="mollify:property" content="multi-user=false">
}}}